[{"content":"项目概述 本项目是一款基于微服务架构的企业级接口测试平台，致力于提供全链路API测试解决方案。平台支持HTTP/HTTPS、WebSocket等多协议测试，集成自动化用例生成、定时任务调度、分布式执行、智能断言等核心能力，具备高可用、高扩展、易维护的特性\n技术架构设计 整体架构 前端：Vue3 + Arco-Design 后端：Spring Cloud Alibaba + SpringBoot + Spring Data JPA +Redis + RabbitMQ 测试机：Python及其相关网络库 部署：Docker Compose(中间与测试机容器化部署，简化环境一致性管理) 微服务架构 dsg-api-gateway : API网关服务，统一入口和路由分发 dsg-auth-service : 认证授权服务，JWT令牌管理 dsg-user-service : 用户管理服务 dsg-organization-service : 组织架构管理 dsg-project-service : 项目管理服务 dsg-test-service : 测试用例管理核心服务 dsg-execution-engine : 测试执行引擎调度服务 dsg-report-service：测试结果存储与测试报告通知服务 dsg-rbac-service：用户组织权限和项目权限的认证与存储服务 dsg-plugin-service：插件管理服务 dsg-websocket-service : WebSocket测试专用服务 核心功能 组织-项目-用户体系 层级关系：组织包含多项目和用户，项目独立管理测试用例与插件，用户权限分组织级和项目级两层控制 权限管理 组织管理员可以通过用户账号邀请用户加入，共享组织内项目资源 项目级默认权限为MEMBER，支持自定义分配权限，实现精细化管理 多协议支持 基础协议：HTTP/HTTPS(覆盖GET/POST/PUT/DELETE等方法)，支持请求头、请求体、变量替换配置 扩展协议：通过插件方式支持WebSocket，并可基于此框架扩展更多协议(如gRPC等协议) 变量管理：支持用例级别全局变量定义，步骤中通过{{argument}}引用，结合JSONPath提取响应数据动态更新变量 测试用例管理 项目分组与用例类型 按项目维度管理用例，支持简单用例(单接口测试)和流程用例(多接口串联，如 “登录→加购→下单”) 可配置项 项目级：环境变量 用例级：全局变量、超时时间、优先级 步骤级：启用状态、失败是否继续运行、请求方法、请求路径、请求头、请求参数、请求体、变量提取、断言规则、前后置脚本 支持状态码、响应时间、JSONPath等多类型断言，支持启用或者禁用断言配置\n测试用例执行与编辑的正确性 用例编辑时自动加锁，其他用户无法同时编辑或执行，避免并发修改导致的用例错乱 锁状态实时同步(前端显示\u0026quot;编辑中\u0026quot;) 测试用例的独立性 效率：测试机主线程汇总结果，子线程并行执行测试用例，提升执行效率 稳定性： 测试用例之间互不干扰，前置步骤报错会依据选项决定是否跳过后续步骤的执行，避免批量无效报错 支持步骤级禁用 灵活性： 用例增删改独立，无需关联其他用例 支持用例复制扩展(复用前置步骤)，减少编写工作量 执行引擎 架构设计 采用\u0026quot;单一职责原则\u0026quot;，添加新的协议测试需求代码改动小 通过RabbitMQ实现异步执行，解耦执行模块和测试机，支持消息重试 覆盖\u0026quot;任务发起-执行-结果聚合\u0026quot;的完整流程 模块职责 execution-engine：任务执行引擎，负责任务调度和分发 测试机集群：实际执行测试用例的节点 report-service：报告服务，负责测试结果收集和报告生成 plugin-service：根据插件的开关来扩展微服务 设计思想 执行模块的缓存用于缓存正在执行的测试任务和节点负载，实现了基于节点负载的权重分配算法和节点故障的二次任务分发，避免测试机宕机导致的任务丢失 任务队列命名统一为协议+nodeid，保证任务分发的正确性，也为后续扩展其他协议提供了统一标准 健康队列用于测试机状态上报，保证执行模块可以正确监控节点状态 报告模块的缓存用于缓存正在执行的测试任务和从测试机节点的执行反馈，待所有测试用例执行完成后存储到数据库，实现了分布式节点的报告聚合和测试结果的存储 报告反馈队列用于报告聚合之后、报告发送之前，通知执行模块任务完成，执行模块删除缓存的测试任务 测试平台操作主库进行测试用例的增删改，测试机读取从库获取测试用例 构造任务时发送每个测试用例的更新时间，通过测试用例的更新时间验证从库数据是否为最新版本，确保测试执行时数据准确性 当测试用例处于执行状态，不允许编辑该测试用例，进一步保证测试执行时数据的准确性 测试用例执行 触发方式：单点执行、批量执行、定时任务(一次性/Cron周期) 定时任务：基于Quartz实现，支持动态扩展调度器(任务量增加时自动扩容)，确保并发任务稳定运行 测试节点监控 动态获取节点在线情况\n测试用例执行中不允许编辑 测试机会校验任务的更新时间与数据库的是否一致，不一致代表从数据库数据还未更新\n通知模块 通知方式：支持邮件、飞书通知(可配置触发条件)，可多选发送 报告形式：默认文本报告，开启Allure插件后生成可视化报告 策略保障：通过缓存通知配置+结果校验，确保通知不重复、不遗漏 插件生态 采用插件化设计扩展平台能力，支持按需启用\nAllure报告：生成可视化报告替代纯文本报告 Pytest用例导出：将平台用例转换为可直接执行的Pytest脚本(含yaml数据文件、工具类) WebSocket测试：支持WebSocket测试，复用现有执行/通知体系，无需修改核心模块 使用接口测试平台测试 为验证平台有效性，基于 Flask 开发简易商城服务（含登录、商品、购物车、订单功能），设计 55 个测试用例（含正常流程 + 异常场景，如无效 JSON、错误请求方法等），通过平台执行验证\n登录 注册 商品搜索 购物车 添加单个商品 添加多个商品 分批次添加商品——补充 订单相关 创建订单 查询余额 订单查询 订单支付 订单取消 测试 上述测试用例+异常测试用例(访问不存在的方法、错误请求方法、无效的JSON格式等)录入至接口测试平台，共计55个\n测试完成\n","date":"2025-08-02T00:00:00Z","image":"https://jc0ol.github.io/p/interface-platform/11_hu_227fefe47feb5186.jpg","permalink":"https://jc0ol.github.io/p/interface-platform/","title":"接口测试平台设计"}]